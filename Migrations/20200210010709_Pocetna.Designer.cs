// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpeculatorVersionOne.Models;

namespace SpeculatorVersionOne.Migrations
{
    [DbContext(typeof(SpeculatorContext))]
    [Migration("20200210010709_Pocetna")]
    partial class Pocetna
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SpeculatorVersionOne.Models.Korisnik", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Lozinka")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("SecurityStamp");

                    b.Property<decimal>("StanjeNaRacunu")
                        .HasColumnType("money");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SpeculatorVersionOne.Models.Kupovina", b =>
                {
                    b.Property<int>("TrosakId")
                        .HasColumnName("TrosakID");

                    b.Property<string>("KorisnikId")
                        .HasColumnName("KorisnikID");

                    b.HasKey("TrosakId", "KorisnikId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Kupovine");
                });

            modelBuilder.Entity("SpeculatorVersionOne.Models.Prihod", b =>
                {
                    b.Property<int>("PrihodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PrihodID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("IznosPrihoda")
                        .HasColumnType("money");

                    b.Property<string>("NazivPrihoda")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("VremePrihoda")
                        .HasColumnType("date");

                    b.HasKey("PrihodId");

                    b.ToTable("Prihodi");
                });

            modelBuilder.Entity("SpeculatorVersionOne.Models.Priliv", b =>
                {
                    b.Property<int>("PrihodId")
                        .HasColumnName("PrihodID");

                    b.Property<string>("KorisnikId")
                        .HasColumnName("KorisnikID");

                    b.HasKey("PrihodId", "KorisnikId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Prilivi");
                });

            modelBuilder.Entity("SpeculatorVersionOne.Models.Proizvod", b =>
                {
                    b.Property<int>("ProizvodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProizvodID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CenaProizvoda")
                        .HasColumnType("money");

                    b.Property<string>("NazivProizvoda")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ProizvodId");

                    b.ToTable("Proizvodi");
                });

            modelBuilder.Entity("SpeculatorVersionOne.Models.Trosak", b =>
                {
                    b.Property<int>("TrosakId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TrosakID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("IznosTroska")
                        .HasColumnType("money");

                    b.Property<string>("NazivTroska")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<DateTime>("VremeTroska")
                        .HasColumnType("date");

                    b.HasKey("TrosakId");

                    b.ToTable("Troskovi");
                });

            modelBuilder.Entity("SpeculatorVersionOne.Models.Uloga", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("SpeculatorVersionOne.Models.ZeljeniProizvod", b =>
                {
                    b.Property<int>("ProizvodId")
                        .HasColumnName("ProizvodID");

                    b.Property<string>("KorisnikId")
                        .HasColumnName("KorisnikID");

                    b.HasKey("ProizvodId", "KorisnikId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("ZeljeniProizvodi");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SpeculatorVersionOne.Models.Uloga")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SpeculatorVersionOne.Models.Korisnik")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SpeculatorVersionOne.Models.Korisnik")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("SpeculatorVersionOne.Models.Uloga")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SpeculatorVersionOne.Models.Korisnik")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SpeculatorVersionOne.Models.Korisnik")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SpeculatorVersionOne.Models.Kupovina", b =>
                {
                    b.HasOne("SpeculatorVersionOne.Models.Korisnik", "Korisnik")
                        .WithMany("Kupovine")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_Kupovina_Korisnik");

                    b.HasOne("SpeculatorVersionOne.Models.Trosak", "Trosak")
                        .WithMany("Kupovine")
                        .HasForeignKey("TrosakId")
                        .HasConstraintName("FK_Kupovina_Trosak");
                });

            modelBuilder.Entity("SpeculatorVersionOne.Models.Priliv", b =>
                {
                    b.HasOne("SpeculatorVersionOne.Models.Korisnik", "Korisnik")
                        .WithMany("Prilivi")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_Priliv_Korisnik");

                    b.HasOne("SpeculatorVersionOne.Models.Prihod", "Prihod")
                        .WithMany("Prilivi")
                        .HasForeignKey("PrihodId")
                        .HasConstraintName("FK_Prilivi_Prihodi");
                });

            modelBuilder.Entity("SpeculatorVersionOne.Models.ZeljeniProizvod", b =>
                {
                    b.HasOne("SpeculatorVersionOne.Models.Korisnik", "Korisnik")
                        .WithMany("ZeljeniProizvodi")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_ZeljeniProizvod_Korisnik");

                    b.HasOne("SpeculatorVersionOne.Models.Proizvod", "Proizvod")
                        .WithMany("ZeljeniProizvodi")
                        .HasForeignKey("ProizvodId")
                        .HasConstraintName("FK_ZeljeniProizvodi_Proizvodi");
                });
#pragma warning restore 612, 618
        }
    }
}
